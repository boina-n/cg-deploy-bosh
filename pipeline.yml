---
jobs:
- name: node-exporter-boshrelease
  plan:
  - aggregate:
    - get: release-git-repo
      resource: node-exporter-release-git-repo
      trigger: true
    - get: pipeline-tasks
    - get: final-builds-dir-tarball
      resource: node-exporter-final-builds-dir-tarball
    - get: releases-dir-tarball
      resource: node-exporter-releases-dir-tarball
  - task: finalize-release
    file: pipeline-tasks/finalize-bosh-release.yml
    config:
      params:
        PRIVATE_YML_CONTENT: {{node-exporter-private-yml}}
  - aggregate:
    - put: node-exporter-release
      params:
        file: finalized-release/node-exporter-*.tgz
    - put: node-exporter-final-builds-dir-tarball
      params:
        file: finalized-release/final-builds-dir-node-exporter.tgz
    - put: node-exporter-releases-dir-tarball
      params:
        file: finalized-release/releases-dir-node-exporter.tgz

- name: deploy-development-bosh
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: bosh-config
      trigger: true
    - get: bosh-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: cpi-release
      trigger: true
    - get: bosh-stemcell
    - get: common
      resource: common-development
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-development
    - get: semver-tooling-version
      passed: [common-releases-tooling]
  - task: bosh-manifest
    config: &manifest-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: common
      - name: bosh-config
      - name: terraform-yaml
      outputs:
      - name: bosh-manifest
      run:
        path: sh
        args:
        - -exc
        - |
          bosh-config/generate.sh \
            terraform-yaml/state.yml \
            common/secrets.yml \
            > bosh-manifest/manifest.yml
  - put: developmentbosh-deployment
    params: &bosh-deployment
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: bosh-manifest/manifest.yml
      releases:
      - bosh-release/*.tgz
      - uaa-release/*.tgz
      - cpi-release/*.tgz
      stemcells:
      - bosh-stemcell/*.tgz
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy development BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed development BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: common-releases-development
  serial: true
  plan:
  - aggregate:
    - get: certificate
      resource: master-bosh-root-cert
    - get: bosh-config
    - get: pipeline-tasks
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: cg-s3-riemann-release
      trigger: true
    - get: cg-s3-collectd-release
      trigger: true
    - get: cron-release
      trigger: true
    - get: developmentbosh-deployment
      passed: [deploy-development-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
      params: &bosh-params-development
        BOSH_USERNAME: {{developmentbosh-username}}
        BOSH_PASSWORD: {{developmentbosh-password}}
        BOSH_TARGET: {{developmentbosh-target}}
        BOSH_CERT: master-bosh.crt
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
      params: *bosh-params-development
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
      params: *bosh-params-development
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
      params: *bosh-params-development
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
      params: *bosh-params-development
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
      params: *bosh-params-development
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
      params: *bosh-params-development
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
      params: *bosh-params-development
    - task: upload-riemann
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemann-release
      params: *bosh-params-development
    - task: upload-collectd
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-collectd-release
      params: *bosh-params-development
    - task: upload-cron
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cron-release
      params: *bosh-params-development
  - task: update-runtime-config
    file: bosh-config/update-runtime-config.yml
    params:
      BOSH_CACERT: certificate/master-bosh.crt
      BOSH_ENV: {{developmentbosh-target}}
      BOSH_USERNAME: {{developmentbosh-username}}
      BOSH_PASSWORD: {{developmentbosh-password}}
      TRIPWIRE_LOCALPASS: {{tripwire-localpass-development}}
      TRIPWIRE_SITEPASS: {{tripwire-sitepass-development}}
      AWS_REGION: {{aws-region-development}}
      NEWRELIC_LICENSE_KEY: {{newrelic-license-key-development}}
      NESSUS_AGENT_KEY: {{nessus-agent-key-development}}
      NESSUS_AGENT_SERVER: {{nessus-agent-server-development}}
      NESSUS_AGENT_PORT: {{nessus-agent-port-development}}
      NESSUS_AGENT_GROUP: {{nessus-agent-group-development}}
      RIEMANN_SERVER: {{riemann-server-development}}
      RIEMANN_PORT: {{riemann-port-development}}

- name: deploy-staging-bosh
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: bosh-config
      trigger: true
    - get: bosh-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: cpi-release
      trigger: true
    - get: bosh-stemcell
    - get: common
      resource: common-staging
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-staging
    - get: semver-tooling-version
      passed: [common-releases-tooling]
  - task: bosh-manifest
    config: *manifest-config
  - put: stagingbosh-deployment
    params: &bosh-deployment
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: bosh-manifest/manifest.yml
      releases:
      - bosh-release/*.tgz
      - uaa-release/*.tgz
      - cpi-release/*.tgz
      stemcells:
      - bosh-stemcell/*.tgz
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Staging BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Staging BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: common-releases-staging
  serial: true
  plan:
  - aggregate:
    - get: certificate
      resource: master-bosh-root-cert
    - get: bosh-config
    - get: pipeline-tasks
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: cg-s3-riemann-release
      trigger: true
    - get: cg-s3-collectd-release
      trigger: true
    - get: cron-release
      trigger: true
    - get: node-exporter-release
      trigger: true
    - get: stagingbosh-deployment
      passed: [deploy-staging-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
      params: &bosh-params-staging
        BOSH_USERNAME: {{stagingbosh-username}}
        BOSH_PASSWORD: {{stagingbosh-password}}
        BOSH_TARGET: {{stagingbosh-target}}
        BOSH_CERT: master-bosh.crt
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
      params: *bosh-params-staging
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
      params: *bosh-params-staging
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
      params: *bosh-params-staging
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
      params: *bosh-params-staging
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
      params: *bosh-params-staging
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
      params: *bosh-params-staging
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
      params: *bosh-params-staging
    - task: upload-riemann
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemann-release
      params: *bosh-params-staging
    - task: upload-collectd
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-collectd-release
      params: *bosh-params-staging
    - task: upload-cron
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cron-release
      params: *bosh-params-staging
    - task: upload-node-exporter
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: node-exporter-release
      params: *bosh-params-staging
  - task: update-runtime-config
    file: bosh-config/update-runtime-config-staging.yml
    params:
      BOSH_CACERT: certificate/master-bosh.crt
      BOSH_ENV: {{stagingbosh-target}}
      BOSH_USERNAME: {{stagingbosh-username}}
      BOSH_PASSWORD: {{stagingbosh-password}}
      RUNTIME_OVERRIDES: bosh-config/runtime-config-staging.yml
      TRIPWIRE_LOCALPASS: {{tripwire-localpass-staging}}
      TRIPWIRE_SITEPASS: {{tripwire-sitepass-staging}}
      AWS_REGION: {{aws-region-staging}}
      NEWRELIC_LICENSE_KEY: {{newrelic-license-key-staging}}
      NESSUS_AGENT_KEY: {{nessus-agent-key-staging}}
      NESSUS_AGENT_SERVER: {{nessus-agent-server-staging}}
      NESSUS_AGENT_PORT: {{nessus-agent-port-staging}}
      NESSUS_AGENT_GROUP: {{nessus-agent-group-staging}}
      RIEMANN_SERVER: {{riemann-server-staging}}
      RIEMANN_PORT: {{riemann-port-staging}}

- name: deploy-production-bosh
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: bosh-config
      trigger: true
      passed: [deploy-staging-bosh]
    - get: bosh-release
      trigger: true
      passed: [deploy-staging-bosh]
    - get: uaa-release
      trigger: true
      passed: [deploy-staging-bosh]
    - get: cpi-release
      trigger: true
      passed: [deploy-staging-bosh]
    - get: bosh-stemcell
      passed: [deploy-staging-bosh]
    - get: semver-tooling-version
      passed: [common-releases-tooling]
    - get: common
      resource: common-production
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-production
  - task: bosh-manifest
    config: *manifest-config
  - put: productionbosh-deployment
    params: *bosh-deployment
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy production BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed production BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: common-releases-production
  serial: true
  plan:
  - aggregate:
    - get: certificate
      resource: master-bosh-root-cert
    - get: bosh-config
    - get: pipeline-tasks
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: cg-s3-riemann-release
      trigger: true
    - get: cg-s3-collectd-release
      trigger: true
    - get: cron-release
      trigger: true
    - get: productionbosh-deployment
      passed: [deploy-production-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
      params: &bosh-params-prod
        BOSH_USERNAME: {{productionbosh-username}}
        BOSH_PASSWORD: {{productionbosh-password}}
        BOSH_TARGET: {{productionbosh-target}}
        BOSH_CERT: master-bosh.crt
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
      params: *bosh-params-prod
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
      params: *bosh-params-prod
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
      params: *bosh-params-prod
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
      params: *bosh-params-prod
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
      params: *bosh-params-prod
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
      params: *bosh-params-prod
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
      params: *bosh-params-prod
    - task: upload-riemann
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemann-release
      params: *bosh-params-prod
    - task: upload-collectd
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-collectd-release
      params: *bosh-params-prod
    - task: upload-cron
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cron-release
      params: *bosh-params-prod
  - task: update-runtime-config
    file: bosh-config/update-runtime-config.yml
    params:
      BOSH_CACERT: certificate/master-bosh.crt
      BOSH_ENV: {{productionbosh-target}}
      BOSH_USERNAME: {{productionbosh-username}}
      BOSH_PASSWORD: {{productionbosh-password}}
      TRIPWIRE_LOCALPASS: {{tripwire-localpass-production}}
      TRIPWIRE_SITEPASS: {{tripwire-sitepass-production}}
      AWS_REGION: {{aws-region-production}}
      NEWRELIC_LICENSE_KEY: {{newrelic-license-key-production}}
      NESSUS_AGENT_KEY: {{nessus-agent-key-production}}
      NESSUS_AGENT_SERVER: {{nessus-agent-server-production}}
      NESSUS_AGENT_PORT: {{nessus-agent-port-production}}
      NESSUS_AGENT_GROUP: {{nessus-agent-group-production}}
      RIEMANN_SERVER: {{riemann-server-production}}
      RIEMANN_PORT: {{riemann-port-production}}

- name: deploy-tooling-bosh
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: bosh-config
    - get: bosh-release
    - get: uaa-release
    - get: uaa-customized-release
    - get: cpi-release
    - get: bosh-stemcell
    - get: common
      resource: common-tooling
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-tooling
    - get: semver-master-version
      passed: [common-releases-master]
  - task: bosh-manifest
    config:
      <<: *manifest-config
      run:
        path: sh
        args:
        - -exc
        - |
          bosh-config/generate.sh \
            bosh-config/tooling-uaa.yml \
            terraform-yaml/state.yml \
            common/secrets.yml \
            > bosh-manifest/manifest.yml
  - put: toolingbosh-deployment
    params:
      manifest: bosh-manifest/manifest.yml
      releases:
      - bosh-release/*.tgz
      - uaa-release/*.tgz
      - uaa-customized-release/*.tgz
      - cpi-release/*.tgz
      stemcells:
      - bosh-stemcell/*.tgz
      cert: ~
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Tooling BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Tooling BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: uaa-smoke-tests
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: uaa-customized-release
      passed: [deploy-tooling-bosh]
    - get: toolingbosh-deployment
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/uaa-smoke-tests.yml
    params:
      BASE_URL: {{uaa-url-opslogin}}
  on_failure:
    put: slack
    params:
      text: |
        :x: UAA Smoke Tests for opslogin FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: common-releases-tooling
  serial: true
  plan:
  - aggregate:
    - get: certificate
      resource: master-bosh-root-cert
    - get: bosh-config
    - get: pipeline-tasks
    - get: common-tooling
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: cg-s3-riemann-release
      trigger: true
    - get: cg-s3-collectd-release
      trigger: true
    - get: cron-release
      trigger: true
    - get: toolingbosh-deployment
      passed: [deploy-tooling-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
      params: &bosh-params-tooling
        BOSH_CLIENT: {{toolingbosh-uaa-client}}
        BOSH_CLIENT_SECRET: {{toolingbosh-uaa-client-secret}}
        BOSH_TARGET: {{toolingbosh-target}}
        BOSH_CERT: master-bosh.crt
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
      params: *bosh-params-tooling
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
      params: *bosh-params-tooling
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
      params: *bosh-params-tooling
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
      params: *bosh-params-tooling
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
      params: *bosh-params-tooling
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
      params: *bosh-params-tooling
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
      params: *bosh-params-tooling
    - task: upload-riemann
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemann-release
      params: *bosh-params-tooling
    - task: upload-collectd
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-collectd-release
      params: *bosh-params-tooling
    - task: upload-cron
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cron-release
      params: *bosh-params-tooling
  - put: semver-tooling-version
    params: {bump: patch}
  - task: update-runtime-config
    file: bosh-config/update-runtime-config.yml
    params:
      BOSH_CACERT: certificate/master-bosh.crt
      BOSH_ENV: {{toolingbosh-target}}
      BOSH_USERNAME: {{toolingbosh-username}}
      BOSH_PASSWORD: {{toolingbosh-password}}
      TRIPWIRE_LOCALPASS: {{tripwire-localpass-tooling}}
      TRIPWIRE_SITEPASS: {{tripwire-sitepass-tooling}}
      AWS_REGION: {{aws-region-tooling}}
      NEWRELIC_LICENSE_KEY: {{newrelic-license-key-tooling}}
      NESSUS_AGENT_KEY: {{nessus-agent-key-tooling}}
      NESSUS_AGENT_SERVER: {{nessus-agent-server-tooling}}
      NESSUS_AGENT_PORT: {{nessus-agent-port-tooling}}
      NESSUS_AGENT_GROUP: {{nessus-agent-group-tooling}}
      RIEMANN_SERVER: {{riemann-server-tooling}}
      RIEMANN_PORT: {{riemann-port-tooling}}

- name: common-releases-master
  serial: true
  plan:
  - aggregate:
    - get: certificate
      resource: master-bosh-root-cert
    - get: bosh-config
    - get: pipeline-tasks
    - get: common-masterbosh
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: cg-s3-riemann-release
      trigger: true
    - get: cg-s3-collectd-release
      trigger: true
    - get: cron-release
      trigger: true
    - get: node-exporter-release
      trigger: true
    - get: masterbosh-state
      passed: [deploy-master-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
      params: &bosh-params-master
        BOSH_CERT: master-bosh.crt
        BOSH_USERNAME: {{masterbosh-username}}
        BOSH_PASSWORD: {{masterbosh-password}}
        BOSH_TARGET: {{masterbosh-target}}
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
      params: *bosh-params-master
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
      params: *bosh-params-master
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
      params: *bosh-params-master
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
      params: *bosh-params-master
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
      params: *bosh-params-master
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
      params: *bosh-params-master
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
      params: *bosh-params-master
    - task: upload-riemann
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemann-release
      params: *bosh-params-master
    - task: upload-collectd
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-collectd-release
      params: *bosh-params-master
    - task: upload-cron
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cron-release
      params: *bosh-params-master
    - task: upload-node-exporter
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: node-exporter-release
      params: *bosh-params-master
  - put: semver-master-version
    params: {bump: patch}
  - task: update-runtime-config
    file: bosh-config/update-runtime-config.yml
    input_mapping:
      certificate: common-masterbosh
    params:
      BOSH_ENV: {{masterbosh-target}}
      BOSH_USERNAME: {{masterbosh-username}}
      BOSH_PASSWORD: {{masterbosh-password}}
      TRIPWIRE_LOCALPASS: {{tripwire-localpass-master}}
      TRIPWIRE_SITEPASS: {{tripwire-sitepass-master}}
      AWS_REGION: {{aws-region-master}}
      NEWRELIC_LICENSE_KEY: {{newrelic-license-key-master}}
      NESSUS_AGENT_KEY: {{nessus-agent-key-master}}
      NESSUS_AGENT_SERVER: {{nessus-agent-server-master}}
      NESSUS_AGENT_PORT: {{nessus-agent-port-master}}
      NESSUS_AGENT_GROUP: {{nessus-agent-group-master}}
      RIEMANN_SERVER: {{riemann-server-master}}
      RIEMANN_PORT: {{riemann-port-master}}

- name: deploy-master-bosh
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: bosh-create-env-config
      trigger: true
    - get: common-masterbosh
      trigger: true
    - get: bosh-release
      params:
        tarball: false
      trigger: true
    - get: cpi-release
      params:
        tarball: false
      trigger: true
    - get: bosh-stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-tooling
    - get: bosh-state
      resource: masterbosh-state
  - task: decrypt-private-key
    file: pipeline-tasks/decrypt.yml
    config:
      inputs:
      - name: pipeline-tasks
      - name: common-masterbosh
    params:
      INPUT_FILE: common-masterbosh/boshCA.crt
      OUTPUT_FILE: decrypt/master-bosh.pem
      PASSPHRASE: {{masterbosh-secrets-passphrase}}
  - task: bosh-create-env
    file: bosh-create-env-config/bosh-create-env.yml
  - put: masterbosh-state
    params:
      file: updated-bosh-state/*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Master BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Master BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

resources:
- name: master-bosh-root-cert
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{production-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{ci-secret-access-key}}
    versioned_file: master-bosh.crt

- name: common-tooling
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: tooling-bosh.yml
    secrets_passphrase: {{tooling-secrets-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-development
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: development-bosh.yml
    secrets_passphrase: {{development-secrets-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-staging
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: staging-bosh.yml
    secrets_passphrase: {{staging-secrets-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-production
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: prod-bosh.yml
    secrets_passphrase: {{prod-secrets-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: masterbosh-state
  type: s3-iam
  source:
    bucket: cloud-gov-varz
    region_name: us-gov-west-1
    versioned_file: master-bosh-state.json
    server_side_encryption: AES256

- name: common-masterbosh
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: master-bosh.yml
    secrets_passphrase: {{masterbosh-secrets-passphrase}}
    bosh_cert: master-bosh.pem

- name: bosh-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bosh

- name: uaa-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/uaa-release

- name: cpi-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/bosh-aws-cpi-release

- name: cron-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/cron-boshrelease

- name: bosh-config
  type: git
  source:
    uri: {{bosh-config-git-url}}
    branch: {{bosh-config-git-branch}}
    paths:
    - bosh-deployment.yml
    - update-runtime-config*.yml
    - update-runtime-config.sh
    - runtime-config*.yml
    - tooling-uaa.yml
    - cronjobs/*

- name: bosh-create-env-config
  type: git
  source:
    uri: {{bosh-config-git-url}}
    branch: {{bosh-config-git-branch}}
    paths:
    - bosh-create-env*

- name: bosh-stemcell
  type: s3
  source:
    bucket: {{bosh-stemcell-bucket-name}}
    region_name: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz

- name: toolingbosh-deployment
  type: 18f-bosh-deployment
  source:
    target: {{masterbosh-target}}
    username: {{masterbosh-username}}
    password: {{masterbosh-password}}
    deployment: toolingbosh

- name: developmentbosh-deployment
  type: 18f-bosh-deployment
  source:
    target: {{toolingbosh-target}}
    username: {{toolingbosh-username}}
    password: {{toolingbosh-password}}
    deployment: developmentbosh

- name: stagingbosh-deployment
  type: 18f-bosh-deployment
  source:
    target: {{toolingbosh-target}}
    username: {{toolingbosh-username}}
    password: {{toolingbosh-password}}
    deployment: stagingbosh

- name: productionbosh-deployment
  type: 18f-bosh-deployment
  source:
    target: {{toolingbosh-target}}
    username: {{toolingbosh-username}}
    password: {{toolingbosh-password}}
    deployment: productionbosh

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

- name: cg-s3-fisma-release
  type: s3
  source:
    regexp: fisma-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-tripwire-release
  type: s3
  source:
    regexp: tripwire-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-awslogs-release
  type: s3
  source:
    regexp: awslogs-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-nessus-agent-release
  type: s3
  source:
    regexp: nessus-agent-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-newrelic-release
  type: s3
  source:
    regexp: newrelic-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-clamav-release
  type: s3
  source:
    regexp: clamav-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-snort-release
  type: s3
  source:
    regexp: snort-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-riemannc-release
  type: s3
  source:
    regexp: riemannc-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-riemann-release
  type: s3
  source:
    regexp: riemann-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-collectd-release
  type: s3
  source:
    regexp: collectd-(.*).tgz
    <<: *s3-release-params

- name: uaa-customized-release
  type: s3
  source:
    regexp: uaa-customized-(.*).tgz
    <<: *s3-release-params

- name: node-exporter-release-git-repo
  type: git
  source:
    uri: {{node-exporter-release-git-url}}
    branch: {{node-exporter-release-git-branch}}

- name: node-exporter-release
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    regexp: node-exporter-(.*).tgz
    region_name: {{s3-bosh-releases-region}}
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    server_side_encryption: AES256

- name: node-exporter-final-builds-dir-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    versioned_file: final-builds-dir-node-exporter.tgz
    region_name: {{s3-bosh-releases-region}}
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    server_side_encryption: AES256

- name: node-exporter-releases-dir-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    versioned_file: releases-dir-node-exporter.tgz
    region_name: {{s3-bosh-releases-region}}
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    server_side_encryption: AES256

- name: semver-master-version
  type: semver
  source:
    driver: s3
    bucket: {{semver-bucket}}
    key: {{semver-master-key}}
    access_key_id: {{semver-access-key-id-master}}
    secret_access_key: {{semver-secret-access-key-master}}
    region_name: {{aws-region}}

- name: semver-tooling-version
  type: semver
  source:
    driver: s3
    bucket: {{semver-bucket}}
    key: {{semver-tooling-key}}
    access_key_id: {{semver-access-key-id-tooling}}
    secret_access_key: {{semver-secret-access-key-tooling}}
    region_name: {{aws-region}}

- name: terraform-yaml-tooling
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-tooling}}
    versioned_file: {{tf-state-file-tooling}}
    region_name: {{aws-region}}

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-development}}
    versioned_file: {{tf-state-file-development}}
    region_name: {{aws-region}}

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-staging}}
    versioned_file: {{tf-state-file-staging}}
    region_name: {{aws-region}}

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-production}}
    versioned_file: {{tf-state-file-production}}
    region_name: {{aws-region}}

resource_types:
- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource
- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

s3-release-params: &s3-release-params
  access_key_id: {{ci-access-key-id}}
  secret_access_key: {{ci-secret-access-key}}
  bucket: {{s3-bosh-releases-bucket}}
  region_name: {{aws-region}}
  private: true
